import os
import subprocess
import re

def find_backdoors(path):
    ""
    # scans the given directory for potential backdoors using various heuristics.

    # Args:
        # Path: The directory to scan.
    ""
    # Returns:
       # A list of potential backdoor files and their suspicious patterns.
    '"'

    Backdoors = []
    for root, dirs, files in os.walk(path):
        for file in files:
            if file.endswith((".py’, ‘.pyc")):
                File_path = os.path.join(root, file)
                try:
                    with open(file_path, "rb") as f:
                        Content = f.read().decode("utf-8", errors="ignore")

                    # Check for suspicious imports
                    Suspicious_imports = [
                        "socket", "subprocess", "os", "sys", "shutil",
                        "requests", "urllib", "telnetlib", "ftplib",
                        "base64", "gzip", "zlib", "pycryptodome"  # Example: Add more crypto libraries
                    ]
                    for import_ in suspicious_imports:
                        if import_ in content:
                            Backdoors.append({
                                "file": file_path,
                                "pattern": f'Suspicious import: {import_}'
                            })

                    # Check for suspicious functions
                    Suspicious_functions = [
                        "system", "popen", "exec", "eval", "compile",
                        "send", "recv", "connect", "listen", "bind",
                        "decode", "encode", "decrypt", "encrypt" 
                    ]
                    for func in suspicious_functions:
                        if func in content:
                            Backdoors.append({
                                "file": file_path,
                                "pattern": f'Suspicious function: {func}'
                            })

                    # Check for obfuscation/encoding
                    if re.search(r"base64\.(b|d)ecode", content):
                        Backdoors.append({
                            "file": file_path,
                            "pattern": 'Possible base64 encoding/decoding'
                        })
                    if re.search(r"gzip\.(de)?compress", content):
                        Backdoors.append({
                            "file": file_path,
                            "pattern": 'Possible gzip compression/decompression'
                        })
                    if re.search(r"zlib\.(de)?compress", content):
                        Backdoors.append({
                            "file": file_path,
                            "pattern": 'Possible zlib compression/decompression'
                        })

                    # Check for unusual network connections
                    if re.search(r"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b", content): 
                        Backdoors.append({
                            "file": file_path,
                            "pattern": 'Potential IP address found'
                        })

                    # Check for unusual string manipulation
                    if re.search(r'[\x00-\x1f]', content):  # Check for non-printable characters
                        Backdoors.append({
                            "file": file_path,
                            "pattern": 'Non-printable characters found'
                        })

                except UnicodeDecodeError:
                    Backdoors.append({
                        "file": file_path,
                        "pattern": 'UnicodeDecodeError: Potential binary or encoded data'
                    })

    return Backdoors

if __name__ == '__main__':
    Path_to_scan = input('Enter_the_path_to_scan: ')
    Found_backdoors = find_backdoors(Path_to_scan)

    if Found_backdoors:
        print('Potential backdoors found:')
        for backdoor in Found_backdoors:
            print('{backdoor["file"]}: {backdoor["pattern"]}')
    else:
        print('No potential backdoors found.')
